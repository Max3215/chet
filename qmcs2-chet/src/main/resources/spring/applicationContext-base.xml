<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 注解扫描 -->
	<context:annotation-config />
	<!-- 扫描注解Bean 不扫描控制器 -->
	<context:component-scan base-package="com.qmcs">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 加载配置文件 -->
	<context:property-placeholder ignore-resource-not-found="true"
								  location="classpath*:/mysql.properties" />
	<bean id="es" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool"></bean>
	<!-- 数据源配置 -->
	<bean id="dataSourceQmcs" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.qmcs.url}" />
		<property name="username" value="${mysql.qmcs.username}" />
		<property name="password" value="${mysql.qmcs.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
		<!--
         | 加密数据库密码
         | <property name="filters" value="config" />
         | <property name="connectionProperties" value="config.decrypt=true" />
         | -->
	</bean>
	<bean id="jdbcTemplateQmcs" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceQmcs"></property>
	</bean>
	<!-- mybatis config -->
	<bean id="sqlSessionFactoryQmcs" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceQmcs" />
		<property name="typeAliasesPackage" value="com.qmcs.info.model.mybatis,com.qmcs.chet.mybatis" />
	</bean>
	<!-- 自动组装数据层 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryQmcs"/>
		<property name="basePackage" value="com.qmcs.info.model.mybatis,com.qmcs.chet.mybatis" />
	</bean>
	<!-- 定义数据源事件 -->
	<bean id="txManagerQmcs" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceQmcs"></property>
	</bean>


	<!-- 配制哪些对象需要SPRING去管理事务 -->
	<!-- com包（及子包）下面所有以BusinessImpl结尾的对象都拥有事务语义 -->
	<!--<aop:config>
		<aop:pointcut id="servicesPointcutQmcs" expression="execution(* com..*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdviceQmcs" pointcut-ref="servicesPointcutQmcs" />
	</aop:config>-->

	<!-- 事务控制   -->
	<tx:annotation-driven transaction-manager="txManagerQmcs" proxy-target-class="true" />
	<!-- 定义事务传播属性 -->
	<tx:advice id="txAdviceQmcs" transaction-manager="txManagerQmcs">
		<tx:attributes>
			<tx:method name="get*" read-only="true" no-rollback-for="Exception,RuntimeException,AppException" />
			<tx:method name="select*" read-only="true" no-rollback-for="Exception,RuntimeException,AppException" />
			<tx:method name="insert*" isolation="READ_COMMITTED" propagation="REQUIRED" rollback-for="Exception,RuntimeException,AppException" />
			<tx:method name="update*" isolation="READ_COMMITTED" propagation="REQUIRED" rollback-for="Exception,RuntimeException,AppException" />
			<tx:method name="delete*" isolation="READ_COMMITTED" propagation="REQUIRED" rollback-for="Exception,RuntimeException,AppException" />
			<tx:method name="exe" isolation="READ_COMMITTED" propagation="REQUIRED" rollback-for="Exception,RuntimeException,AppException" />
		</tx:attributes>
	</tx:advice>
	<!--
     | 引入其他配置文件
     | -->
	<import resource="classpath:spring-common.xml" />
</beans>